@use "sass:math";

@mixin breakpoint($value) {

	@if type-of($value) == 'string' {
		@if ($value == "xs" or $value == "phone") {
			@media (max-width: 699px) {
				@content;
			}
		}
		@else if ($value == "sm" or $value == "tablet") {
			@media (min-width: 700px) {
				@content;
			}
		}

		@else if ($value == "md" or $value == "laptop") {
			@media(min-width: 980px) {
				@content;
			}
		}
		@else if($value == "lg" or $value == "desktop") {
			@media (min-width: 1140px) {
				@content;
			}
		}
		@else if($value =="xl" or $value =="tvscreen") {
			@media (min-width: 1260px) {
				@content;
			}
		}

		@else {
			@warn "Breakpoint mixin supports: xs or phone, sm or tablet, md or laptop, lg or desktop, xl or tvscreen as string variables";
		}

	} 

	@else if is-length($value){
		@media(min-width: #{$value}){
			@content;
		}
	}

	@else {
		@warn "Breakpoint mixin supports: string variables or relative units";
	}

	
}

@mixin colors() {
	$colors: black, white, green, pink, blue, orange;

	@each $color in $colors {
		&.color-#{$color} {
			color: $color;
		}
	}
}
@mixin textAligns() {
	$alignment: left, center, right, justify;

	@each $alignment in $alignment {
		&.text-align-#{alignment} {
			text-align: $alignment;
		}
	}
}
@mixin margins() {
	$alignment: top,right, bottom, left;
	@each $side in $sides {
		@for $i from 1 through 12{
			&.margins-#{side} {$i} {
				margin-#{$side}:#{math.div($i,2)}rem;
			}}}}

@mixin justifyContents(){
			$values: flex-start, flex-end, center, space-between, space-around,
				space-evenly;
@each $value in $values {
				&.justify-content-#{$values} {
	justify-content:$value;}}}

